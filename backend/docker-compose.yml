version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: src/Dockerfile
    env_file:
      - .env
    networks:
      - traefik-public
      - barbapp-internal
    environment:
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - JwtSettings__ExpirationMinutes=${JWT_EXPIRATION_MINUTES}
      - AppSettings__FrontendUrl=${FRONTEND_URL}
      - SmtpSettings__Host=${SMTP_HOST}
      - SmtpSettings__Port=${SMTP_PORT}
      - SmtpSettings__UseSsl=${SMTP_USE_SSL}
      - SmtpSettings__Username=${SMTP_USERNAME}
      - SmtpSettings__Password=${SMTP_PASSWORD}
      - SmtpSettings__FromEmail=${SMTP_FROM_EMAIL}
      - SmtpSettings__FromName=${SMTP_FROM_NAME}
      - Sentry__Dsn=${SENTRY_DSN}
      - Sentry__Environment=${SENTRY_ENVIRONMENT}
      - Sentry__Release=${SENTRY_RELEASE}
      - Sentry__TracesSampleRate=${SENTRY_TRACES_SAMPLE_RATE}
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.barbapp-backend.rule=Host(`dev-api-barberapp.tasso.dev.br`)"
        - "traefik.http.routers.barbapp-backend.entrypoints=websecure"
        - "traefik.http.routers.barbapp-backend.tls.certresolver=myresolver"
        - "traefik.http.services.barbapp-backend.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:16
    networks:
      - barbapp-internal
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  smtp4dev:
    image: rnwood/smtp4dev:latest
    networks:
      - traefik-public
      - barbapp-internal
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.smtp4dev.rule=Host(`${SMTP_HOSTNAME}`)"
        - "traefik.http.routers.smtp4dev.entrypoints=websecure"
        - "traefik.http.routers.smtp4dev.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"
        - "traefik.http.services.smtp4dev.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure

  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - traefik-public
      - barbapp-internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/etc/traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.${TRAEFIK_CERT_RESOLVER}.acme.tlschallenge=true"
      - "--certificatesresolvers.${TRAEFIK_CERT_RESOLVER}.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.${TRAEFIK_CERT_RESOLVER}.acme.storage=${TRAEFIK_ACME_STORAGE}"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

networks:
  traefik-public:
    external: true
  barbapp-internal:
    external: true

volumes:
  postgres-data:
  traefik-data:
