// <auto-generated />
using System;
using BarbApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BarbApp.Infrastructure.Migrations
{
    [DbContext(typeof(BarbAppDbContext))]
    [Migration("20251012133635_UpdateEntitiesForTask14")]
    partial class UpdateEntitiesForTask14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminBarbeariaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("admin_barbearia_user_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_admin_barbearia_users_barbearia_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_admin_barbearia_users_email");

                    b.HasIndex("Email", "BarbeariaId")
                        .IsUnique()
                        .HasDatabaseName("ix_admin_barbearia_users_email_barbearia_id");

                    b.ToTable("admin_barbearia_users", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminCentralUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_central_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_admin_central_users_email");

                    b.ToTable("admin_central_users", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("barber_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("telefone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_barbers_barbearia_id");

                    b.HasIndex("Telefone")
                        .HasDatabaseName("ix_barbers_telefone");

                    b.HasIndex("Telefone", "BarbeariaId")
                        .IsUnique()
                        .HasDatabaseName("ix_barbers_telefone_barbearia_id");

                    b.ToTable("barbers", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barbershop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("barbershop_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_barbershops_code");

                    b.ToTable("barbershops", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("telefone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_customers_barbearia_id");

                    b.HasIndex("Telefone")
                        .HasDatabaseName("ix_customers_telefone");

                    b.HasIndex("Telefone", "BarbeariaId")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_telefone_barbearia_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminBarbeariaUser", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany("AdminUsers")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barber", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany("Barbers")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany("Customers")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barbershop", b =>
                {
                    b.Navigation("AdminUsers");

                    b.Navigation("Barbers");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
