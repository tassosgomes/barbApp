// <auto-generated />
using System;
using System.Collections.Generic;
using BarbApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BarbApp.Infrastructure.Migrations
{
    [DbContext(typeof(BarbAppDbContext))]
    [Migration("20251020132724_AddStatusIndex")]
    partial class AddStatusIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarbApp.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminBarbeariaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("admin_barbearia_user_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_admin_barbearia_users_barbearia_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_admin_barbearia_users_email");

                    b.HasIndex("Email", "BarbeariaId")
                        .IsUnique()
                        .HasDatabaseName("ix_admin_barbearia_users_email_barbearia_id");

                    b.ToTable("admin_barbearia_users", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminCentralUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_central_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_admin_central_users_email");

                    b.ToTable("admin_central_users", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("appointment_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<Guid>("BarberId")
                        .HasColumnType("uuid")
                        .HasColumnName("barber_id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_appointments_barbearia_id");

                    b.HasIndex("BarberId")
                        .HasDatabaseName("ix_appointments_barber_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_appointments_customer_id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("ix_appointments_start_time");

                    b.HasIndex("BarbeariaId", "StartTime")
                        .HasDatabaseName("ix_appointments_barbearia_start_time");

                    b.HasIndex("BarberId", "StartTime")
                        .HasDatabaseName("ix_appointments_barber_start_time");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("barber_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.PrimitiveCollection<List<Guid>>("ServiceIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("service_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_barbers_barbearia_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_barbers_email");

                    b.HasIndex("Phone")
                        .HasDatabaseName("ix_barbers_phone");

                    b.HasIndex("BarbeariaId", "Email")
                        .IsUnique()
                        .HasDatabaseName("uq_barbers_barbearia_email");

                    b.HasIndex("BarbeariaId", "IsActive")
                        .HasDatabaseName("ix_barbers_barbearia_is_active");

                    b.ToTable("barbers", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barbershop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("barbershop_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("owner_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_barbershops_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_barbershops_name");

                    b.ToTable("barbershops", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.BarbershopService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_barbershop_services_barbearia_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_barbershop_services_is_active");

                    b.HasIndex("BarbeariaId", "Name")
                        .HasDatabaseName("ix_barbershop_services_barbearia_name");

                    b.ToTable("barbershop_services", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("BarbeariaId")
                        .HasColumnType("uuid")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("telefone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_customers_barbearia_id");

                    b.HasIndex("Telefone")
                        .HasDatabaseName("ix_customers_telefone");

                    b.HasIndex("Telefone", "BarbeariaId")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_telefone_barbearia_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.AdminBarbeariaUser", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarbApp.Domain.Entities.Barber", "Barber")
                        .WithMany()
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarbApp.Domain.Entities.BarbershopService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Barbearia");

                    b.Navigation("Barber");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barber", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Barbershop", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BarbApp.Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("BarbershopId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("document_type");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("document");

                            b1.HasKey("BarbershopId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("barbershops");

                            b1.WithOwner()
                                .HasForeignKey("BarbershopId");
                        });

                    b.OwnsOne("BarbApp.Domain.ValueObjects.UniqueCode", "Code", b1 =>
                        {
                            b1.Property<Guid>("BarbershopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("code");

                            b1.HasKey("BarbershopId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("barbershops");

                            b1.WithOwner()
                                .HasForeignKey("BarbershopId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Document")
                        .IsRequired();
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.BarbershopService", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarbApp.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BarbApp.Domain.Entities.Barbershop", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbearia");
                });
#pragma warning restore 612, 618
        }
    }
}
